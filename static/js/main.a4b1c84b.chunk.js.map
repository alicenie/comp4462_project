{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/CityMap.jsx","components/HeatMap.jsx","components/DashBoard.jsx","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CityMap","props","priorityColor","obj","priorityData","d3","domain","range","colors","properties","Id","drawCityMap","geoData","console","log","priorityPerArea","margin","width","height","selectAll","remove","svg","append","attr","projection","fitSize","path","data","features","enter","style","d","on","event","this","selectedRegion","Nbrhood","onSelectRegion","centroid","text","toString","catch","error","id","React","Component","HeatMap","drawLegend","vsupScale","colorScale","vsupLegend","vsup","arcmapLegend","scale","size","x","y","vtitle","utitle","call","colorLegendSvg","linearGradient","drawHeatmap","start_time","Date","parse","heatdata","time_range","i","curtime","date","datestring","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","dateDisplay","filter","index","forEach","intensity","uncertainty","count","parseFloat","medical_i","state","attribute","medical","medical_u","power_i","power","power_u","sewer_and_water_i","sewer_and_water","sewer_and_water_u","roads_and_bridges_i","roads_and_bridges","roads_and_bridges_u","buildings_i","buildings","buildings_u","push","time","time_string","location","parseInt","intensity_total","uncertainty_total","xScale","padding","g","select","yDomain","loc_intensity","Array","from","length","_","map","reduce","sum","cur","descend","sort","a","b","yScale","bandwidth","handleOrder","document","getElementById","checked","setState","handleAttribute","handleUncertainty","interpolateIsoRdBu","interpolate","quantization","branching","layers","valueDomain","uncertaintyDomain","quantize","interpolator","end_time","class","type","name","value","onChange","DashBoard","handleSelectRegion","rowHeight","window","innerWidth","innerHeight","className","layout","w","h","cols","backgroundColor","paddingLeft","marginLeft","marginTop","captions","meta","color","options","captionProps","textAnchor","fontSize","fontFamily","ReactDOM","render","StrictMode"],"mappings":"wNAAe,I,aCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8DCkFCQ,E,kDArFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,cAAgB,SAACC,EAAKC,GAKlB,OAJeC,MACVC,OAAO,CAAC,GAAI,MACZC,MAAM,CAAC,YAAa,aAElBC,CAAOJ,EAAaD,EAAIM,WAAWC,GAAK,KAdhC,EAiBnBC,YAAc,WAEVN,IADoB,gFACCX,MAAK,SAACkB,GACvBC,QAAQC,IAAI,UAAWF,GAEvB,IAAMG,EAAkB,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAE9FC,EAAiB,GAAjBA,EAA4B,GAA5BA,EAAqC,EAArCA,EAAgD,GAChDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAEhCX,IAAU,YAAYc,UAAU,OAAOC,SACvC,IAAIC,EAAMhB,IACE,YAAYiB,OAAO,OAC1BC,KAAK,QAASN,EAAQD,EAAcA,GACpCO,KAAK,SAAUL,EAASF,EAAaA,GACrCM,OAAO,KACPC,KAAK,YAAa,aAAeP,EAAc,IAAMA,EAAa,KAEjEQ,EAAanB,MAAiBoB,QAAQ,CAACR,EAAOC,GAASN,GACvDc,EAAOrB,IAAWmB,GAExBH,EAAIF,UAAU,QACTQ,KAAKf,EAAQgB,UACbC,QACAP,OAAO,QACPC,KAAK,IAAKG,GACVI,MAAM,SAAU,QAChBA,MAAM,QAAQ,SAACC,GAAD,OAAO,EAAK7B,cAAc6B,EAAGhB,MAC3CQ,KAAK,QAAS,SACdS,GAAG,aAAa,SAAUC,EAAOF,GAC9B1B,IAAU6B,MACLX,KAAK,UAAW,OAExBS,GAAG,YAAY,SAAUC,EAAOF,GAC7B1B,IAAU6B,MACLX,KAAK,UAAW,MAExBS,GAAG,SAAS,SAACC,EAAOF,GACjB,IAAII,EAAiB,CAACJ,EAAEtB,WAAWC,GAAIqB,EAAEtB,WAAW2B,SACpD,EAAKnC,MAAMoC,eAAeF,MAIlCd,EAAIF,UAAU,WACTQ,KAAKf,EAAQgB,UACbC,QAAQP,OAAO,QACfC,KAAK,QAAS,UACdA,KAAK,KAAK,SAAUQ,GACjB,OAAOL,EAAKY,SAASP,GAAG,MAE3BR,KAAK,KAAK,SAAUQ,GACjB,OAAOL,EAAKY,SAASP,GAAG,MAE3BR,KAAK,cAAe,UACpBA,KAAK,YAAa,QAClBgB,MAAK,SAACR,GAAD,OAAOA,EAAEtB,WAAW2B,QAAQI,iBAEvCC,OAAM,SAAUC,GAEf7B,QAAQC,IAAI,iCA7ED,E,qDAKnB,WACIoB,KAAKvB,gB,oBA0ET,WACI,OAAO,qBAAKgC,GAAG,gB,GAlFDC,IAAMC,W,QC8SbC,E,kDA3SX,WAAY7C,GAAQ,IAAD,uBACf,cAAMA,IA6CV8C,WAAa,SAACC,EAAWC,GAErB,IAAIC,EAAaC,IAAYC,eAC7BF,EACKG,MAAML,GACNM,KAAK,KACLC,EAAE,GACFC,EAAE,GACFC,OAAO,sBACPC,OAAO,eAEZrD,IAAU,eAAec,UAAU,OAAOC,SACtBf,IACR,eAAeiB,OAAO,OAC7BC,KAAK,QAAS,KACdA,KAAK,SAAU,KACfD,OAAO,KACPC,KAAK,YAAa,oBACTD,OAAO,KAAKqC,KAAKT,GAG/B7C,IAAU,gBAAgBc,UAAU,OAAOC,SAC3C,IAAIwC,EAAiBvD,IACT,gBAAgBiB,OAAO,OAC9BC,KAAK,QAAS,KACdA,KAAK,SAAU,IACfD,OAAO,KAERuC,EAAiBD,EAAetC,OAAO,QAAQA,OAAO,kBACrDC,KAAK,KADW,mBAGrBsC,EACKtC,KAAK,KAAM,MACXA,KAAK,KAAM,MACXA,KAAK,KAAM,QACXA,KAAK,KAAM,MAGhBsC,EAAevC,OAAO,QACjBC,KAAK,SAAU,MACfA,KAAK,aAAc0B,EAAW,IAEnCY,EAAevC,OAAO,QACjBC,KAAK,SAAU,OACfA,KAAK,aAAc0B,EAAW,IAGnCY,EAAevC,OAAO,QACjBC,KAAK,SAAU,QACfA,KAAK,aAAc0B,EAAW,KAEnCW,EAAetC,OAAO,QACjBC,KAAK,QAAS,KACdA,KAAK,SAAU,IACfO,MAAM,OAHX,yBAIKP,KAAK,IAAK,IACVA,KAAK,IAAK,IAEfqC,EAAetC,OAAO,QAAQiB,KAAK,KAAKhB,KAAK,IAAK,IAAIA,KAAK,IAAK,IAChEqC,EAAetC,OAAO,QAAQiB,KAAK,MAAMhB,KAAK,IAAK,KAAKA,KAAK,IAAK,KAzGnD,EA4GnBuC,YAAc,SAACd,EAAWC,GAEtB5C,IAAO,kBAAkBX,MAAK,SAACiC,GAC3Bd,QAAQC,IAAI,UAAWa,GAMvB,IAHA,IAAIoC,EAAaC,KAAKC,MAAM,sBAExBC,EAAW,GAAIC,EAAa,GANI,WAO3BC,GAEL,IAAIC,EAAUN,EAJH,KAIgBK,EACvBE,EAAO,IAAIN,KAAKK,GAChBE,EAAaD,EAAKE,cAAgB,KAAOF,EAAKG,WAAa,GAAGjC,WAAWkC,SAAS,EAAG,KAAO,IAAMJ,EAAKK,UAAUnC,WAAWkC,SAAS,EAAG,KAAO,IAAMJ,EAAKM,WAAWpC,WAAWkC,SAAS,EAAG,KAAO,IAAMJ,EAAKO,aAAarC,WAAWkC,SAAS,EAAG,KAAO,IAAMJ,EAAKQ,aAAatC,WAAWkC,SAAS,EAAG,KACxSK,GAAeT,EAAKG,WAAa,GAAGjC,WAAa,IAAM8B,EAAKK,UAAY,IAAML,EAAKM,WAAa,IAAMN,EAAKO,aAAarC,WAAWkC,SAAS,EAAG,KAGnJ/C,EAAKqD,QAAO,SAAAjD,GAAC,OAAIA,EAAEkD,OAASV,KAAYW,SAAQ,SAAAnD,GAC5C,IAAIoD,EAAY,EAAGC,EAAc,EAAGC,EAAQ,GACZ,GAA5BC,WAAWvD,EAAEwD,YAAoB,EAAKC,MAAMC,UAAUC,UACtDP,GAAaG,WAAWvD,EAAEwD,WAC1BH,GAAeE,WAAWvD,EAAE4D,WAC5BN,GAAS,IAEiB,GAA1BC,WAAWvD,EAAE6D,UAAkB,EAAKJ,MAAMC,UAAUI,QACpDV,GAAaG,WAAWvD,EAAE6D,SAC1BR,GAAeE,WAAWvD,EAAE+D,SAC5BT,GAAS,IAE2B,GAApCC,WAAWvD,EAAEgE,oBAA4B,EAAKP,MAAMC,UAAUO,kBAC9Db,GAAaG,WAAWvD,EAAEgE,mBAC1BX,GAAeE,WAAWvD,EAAEkE,mBAC5BZ,GAAS,IAE6B,GAAtCC,WAAWvD,EAAEmE,sBAA8B,EAAKV,MAAMC,UAAUU,oBAChEhB,GAAaG,WAAWvD,EAAEmE,qBAC1Bd,GAAeE,WAAWvD,EAAEqE,qBAC5Bf,GAAS,IAEqB,GAA9BC,WAAWvD,EAAEsE,cAAsB,EAAKb,MAAMC,UAAUa,YACxDnB,GAAaG,WAAWvD,EAAEsE,aAC1BjB,GAAeE,WAAWvD,EAAEwE,aAC5BlB,GAAS,GAGbnB,EAASsC,KAAK,CACVC,KAAMpC,EACNqC,YAAa3B,EACb4B,SAAUC,SAAS7E,EAAE4E,UACrBE,gBAAiB1B,EAAYE,EAC7ByB,kBAAmB1B,EAAcC,OAQzClB,EAAWqC,KAAKzB,IAjDXX,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAmDTvD,QAAQC,IAAI,WAAYoD,GAExB,IAAIlD,EAAiB,GAAjBA,EAA4B,GAA5BA,EAAqC,GAArCA,EAAiD,GACjDC,EAAQ,KAAOD,EAAcA,EAC7BE,EAAS,IAAOF,EAAaA,EAEjCX,IAAU,YAAYc,UAAU,OAAOC,SACvC,IAAIC,EAAMhB,IACE,YAAYiB,OAAO,OAC1BC,KAAK,QAASN,EAAQD,EAAcA,GACpCO,KAAK,SAAUL,EAASF,EAAaA,GACrCM,OAAO,KACPC,KAAK,YAAa,aAAeP,EAAc,IAAMA,EAAa,KAGnE+F,EAAS1G,MAAeE,MAAM,CAAC,EAAGU,IAAQ+F,QAAQ,IAAK1G,OAAO6D,GAClE9C,EAAIC,OAAO,KAAKQ,MAAM,YAAa,QAAQ6B,KAAKtD,IAAW0G,IAASpD,MAAK,SAAAsD,GACrEA,EAAEC,OAAO,WAAW9F,SACpB6F,EAAE9F,UAAU,QAAQC,YAIxB,IAUI+F,EAVAC,EAAgBC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGpD,GAAJ,OAAUA,EAAI,KAAGqD,KAAI,SAAArD,GAChE,MAAO,CACHuC,SAAUvC,EACVyC,gBAAiB3C,EAASc,QAAO,SAAAjD,GAAC,OAAIA,EAAE4E,UAAYvC,KAAGsD,QAAO,SAACC,EAAKC,GAChE,OAAIA,EAAIf,gBAAkB,EAAUc,EAAMC,EAAIf,gBAClCc,IACb,OAGX9G,QAAQC,IAAI,qBAAsBsG,GAG9BD,EADA,EAAK3B,MAAMqC,QACDT,EAAcU,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEnB,gBAAkBkB,EAAElB,mBAAiBY,KAAI,SAAA1F,GAAC,OAAIA,EAAE4E,YAE/ES,EAAcU,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAElB,gBAAkBmB,EAAEnB,mBAAiBY,KAAI,SAAA1F,GAAC,OAAIA,EAAE4E,YAE7F9F,QAAQC,IAAI,UAAWqG,GACvB,IAAIc,EAAS5H,MAAeE,MAAM,CAAC,EAAGW,IAASZ,OAAO6G,GAASH,QAAQ,IACvE3F,EAAIC,OAAO,KAAKQ,MAAM,YAAa,QAAQ6B,KAAKtD,IAAY4H,IAAStE,MAAK,SAAAsD,GACtEA,EAAEC,OAAO,WAAW9F,SACpB6F,EAAE9F,UAAU,QAAQC,YAMxBC,EAAIF,YACCQ,KAAKuC,GACLrC,QACAP,OAAO,QACPC,KAAK,KAAK,SAACQ,GAAD,OAAOgF,EAAOhF,EAAE2E,gBAC1BnF,KAAK,KAAK,SAACQ,GAAD,OAAOkG,EAAOlG,EAAE4E,aAC1BpF,KAAK,QAASwF,EAAOmB,aACrB3G,KAAK,SAAU0G,EAAOC,aACtBpG,MAAM,QAAQ,SAACC,GACZ,OAAI,EAAKyD,MAAMJ,YAAqBrD,EAAE8E,gBAAkB,EAAK7D,EAAUjB,EAAE8E,gBAAiB9E,EAAE+E,mBAAqB,QACpG/E,EAAE8E,gBAAkB,EAAK5D,EAAWlB,EAAE8E,iBAAmB,cAG/EpE,OAAM,SAAUC,GAEf7B,QAAQC,IAAI,qCAvOD,EA6OnBqH,YAAc,WACVtH,QAAQC,IAAI,gBACZ,IAAI+G,EAAUO,SAASC,eAAe,mBAAmBC,QACzD,EAAKC,SAAS,CAAEV,aAhPD,EAmPnBW,gBAAkB,WACd3H,QAAQC,IAAI,oBACZ,IAAI4E,EAAU0C,SAASC,eAAe,gBAAgBC,QAClDzC,EAAQuC,SAASC,eAAe,cAAcC,QAC9CnC,EAAoBiC,SAASC,eAAe,0BAA0BC,QACtEtC,EAAkBoC,SAASC,eAAe,wBAAwBC,QAClEhC,EAAY8B,SAASC,eAAe,kBAAkBC,QAC1D,EAAKC,SAAS,CACV9C,UAAW,CACPC,UACAG,QACAM,oBACAH,kBACAM,gBAhQO,EAqQnBmC,kBAAoB,WAChB5H,QAAQC,IAAI,sBACZ,IAAIsE,EAAcgD,SAASC,eAAe,oBAAoBC,QAC9D,EAAKC,SAAS,CAAEnD,iBApQhB,IACIsD,EAAqBrI,MACpBC,OAAO,CAAC,EAAG,GAAK,IAChBC,MAAM,CAHqC,UAAlB,UAApB,YAILoI,YAAYtI,KAEbuI,EAAezF,MAAoB0F,UAAU,GAAGC,OAAO,GAAGC,YADnD,CAAC,EAAG,KACiEC,kBADrD,CAAC,EAAG,IAE3BhG,EAAYG,MAAa8F,SAASL,GAAcrI,MAAMmI,GAEtDzF,EAAa5C,MAEZ6I,aAAa7I,KACbC,OAAO,CAAC,IAAK,IAhBH,OAkBf,EAAKkF,MAAQ,CACTzB,WAAY,EACZoF,SAAU,EACVtB,SAAS,EACTpC,UAAW,CACPC,SAAS,EACTG,OAAO,EACPM,mBAAmB,EACnBH,iBAAiB,EACjBM,WAAW,GAEflB,aAAa,EACbpC,YACAC,cA/BW,E,qDAmCnB,WACIpC,QAAQC,IAAI,wBACZoB,KAAK4B,YAAY5B,KAAKsD,MAAMxC,UAAWd,KAAKsD,MAAMvC,YAClDf,KAAKa,WAAWb,KAAKsD,MAAMxC,UAAWd,KAAKsD,MAAMvC,c,gCAGrD,WACIpC,QAAQC,IAAI,yBACZoB,KAAK4B,YAAY5B,KAAKsD,MAAMxC,UAAWd,KAAKsD,MAAMvC,c,oBAgOtD,WACI,OAAO,sBAAKmG,MAAM,MAAX,UACH,sBAAKA,MAAM,SAAX,UACI,6CAAgBlH,KAAKsD,MAAMzB,cAC3B,qBAAKpB,GAAG,eAEZ,sBAAKyG,MAAM,QAAX,UACI,4CAAqB,uBACrB,uBAAOC,KAAK,QAAQC,KAAK,aAAa3G,GAAG,iBAAiB4G,MAAM,YAAYC,SAAUtH,KAAKiG,cAF/F,cAEyH,uBACrH,uBAAOkB,KAAK,QAAQC,KAAK,aAAa3G,GAAG,kBAAkB4G,MAAM,aAAaC,SAAUtH,KAAKiG,cAHjG,cAII,uBACA,uBACA,uDAAgC,uBAChC,uBAAOkB,KAAK,WAAW1G,GAAG,eAAe4G,MAAM,UAAUC,SAAUtH,KAAKsG,kBAP5E,YAOwG,uBACpG,uBAAOa,KAAK,WAAW1G,GAAG,aAAa4G,MAAM,QAAQC,SAAUtH,KAAKsG,kBARxE,SAQiG,uBAC7F,uBAAOa,KAAK,WAAW1G,GAAG,yBAAyB4G,MAAM,oBAAoBC,SAAUtH,KAAKsG,kBAThG,qBASqI,uBACjI,uBAAOa,KAAK,WAAW1G,GAAG,uBAAuB4G,MAAM,kBAAkBC,SAAUtH,KAAKsG,kBAV5F,mBAU+H,uBAC3H,uBAAOa,KAAK,WAAW1G,GAAG,iBAAiB4G,MAAM,YAAYC,SAAUtH,KAAKsG,kBAXhF,aAYI,uBACA,uBACA,oDAA6B,uBAC7B,uBAAOa,KAAK,QAAQC,KAAK,mBAAmB3G,GAAG,qBAAqB4G,MAAM,gBAAgBC,SAAUtH,KAAKuG,oBAf7G,oBAemJ,uBAC/I,qBAAK9F,GAAG,gBACR,uBAAO0G,KAAK,QAAQC,KAAK,mBAAmB3G,GAAG,mBAAmB4G,MAAM,cAAcC,SAAUtH,KAAKuG,oBAjBzG,iCAkBI,uBACA,uBACA,qBAAK9F,GAAG,yB,GAtSFC,IAAMC,W,kBCsGb4G,G,yDAjGX,WAAYxJ,GAAQ,IAAD,8BACf,cAAMA,IAMVyJ,mBAAqB,SAACvH,GAClBtB,QAAQC,IAAI,iBAAkBqB,GAC9B,EAAKoG,SAAS,CAAEpG,oBAPhB,EAAKqD,MAAQ,CACTrD,eAAgB,CAAC,EAAG,KAHT,E,0CAanB,WAAU,IAAD,OAQCwH,EAAY,GAClB,EAAmDC,OAA/B3I,EAApB,EAAQ4I,WAAR,EAA2BC,YAE3B,OAAQ,8BACJ,eAAC,IAAD,CAAYC,UAAU,SAASC,OAXpB,CACX,CAAE5F,EAAG,IAAKb,EAAG,EAAGC,EAAG,EAAGyG,EAAG,EAAGC,EAAG,GAC/B,CAAE9F,EAAG,IAAKb,EAAG,EAAGC,EAAG,EAAGyG,EAAG,EAAGC,EAAG,GAC/B,CAAE9F,EAAG,IAAKb,EAAG,EAAGC,EAAG,EAAGyG,EAAG,GAAIC,EAAG,GAChC,CAAE9F,EAAG,IAAKb,EAAG,EAAGC,EAAG,GAAIyG,EAAG,GAAIC,EAAG,GACjC,CAAE9F,EAAG,IAAKb,EAAG,EAAGC,EAAG,GAAIyG,EAAG,GAAIC,EAAG,KAMcC,KAAM,GAAIR,UAAWA,EAAW3I,OAAQ,CAAC,EAAG,GAAIC,MAAOA,EAAtG,UACI,8BACI,sBAAKmI,MAAM,OAAOtH,MAAO,CAAEZ,OAAQ,KAAnC,UACI,mBAAGY,MAAO,CAAEsI,gBAAiB,UAAWpJ,OAAQ,MAAOqJ,YAAa,OAApE,sBACA,cAAC,EAAD,CAAShI,eAAgB,SAACF,GAAD,OAAoB,EAAKuH,mBAAmBvH,UAHpE,KAMT,8BACI,sBAAKiH,MAAM,OAAOtH,MAAO,CAAEZ,OAAQ,KAAnC,UACI,mBAAGY,MAAO,CAAEsI,gBAAiB,UAAWpJ,OAAQ,MAAOqJ,YAAa,OAApE,yBAEA,sBAAKjB,MAAM,MAAMtH,MAAO,CAAEwI,WAAY,GAAIC,UAAW,IAArD,UACI,qBAAKnB,MAAM,QAAX,SACI,cAAC,IAAD,CACIoB,SAAU,CAENlE,UAAW,YACXZ,QAAS,UACTM,gBAAiB,kBACjBG,kBAAmB,oBACnBN,MAAO,SAEXlE,KAAM,CACF,CACIA,KAAM,CACF2E,UAAW,GACXZ,QAAS,GACTM,gBAAiB,GACjBG,kBAAmB,GACnBN,MAAO,IAEX4E,KAAM,CAAEC,MAAO,aAGvBpH,KAAM,IACNqH,QAAS,CACLC,aAAc,iBAAO,CACjBb,UAAW,UACXc,WAAY,SACZC,SAAU,GACVC,WAAY,oBAK5B,qBAAK3B,MAAM,QAAX,SACI,6BAAKlH,KAAKsD,MAAMrD,eAAe,cAvCtC,KA4CT,8BACI,qBAAKiH,MAAM,OAAOtH,MAAO,CAAEZ,OAAQ,KAAnC,SACI,mBAAGY,MAAO,CAAEsI,gBAAiB,UAAWpJ,OAAQ,MAAOqJ,YAAa,OAApE,6BAFC,KAKT,8BACI,qBAAKjB,MAAM,OAAOtH,MAAO,CAAEZ,OAAQ,KAAnC,SACI,mBAAGY,MAAO,CAAEsI,gBAAiB,UAAWpJ,OAAQ,MAAOqJ,YAAa,OAApE,kCAFC,KAKT,8BACI,sBAAKjB,MAAM,OAAOtH,MAAO,CAAEZ,OAAQ,MAAnC,UACI,mBAAGY,MAAO,CAAEsI,gBAAiB,UAAWpJ,OAAQ,MAAOqJ,YAAa,OAApE,qBACA,cAAC,EAAD,QAHC,c,GAvFDzH,IAAMC,YCF9BmI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9C,SAASC,eAAe,SAM1B9I,M","file":"static/js/main.a4b1c84b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nclass CityMap extends React.Component {\n    constructor(props) {\n        super(props)\n        // this.state = { selected_location: 0 }\n    }\n\n    componentDidMount() {\n        this.drawCityMap();\n    }\n\n    priorityColor = (obj, priorityData) => {\n        const colors = d3.scaleLinear()\n            .domain([10, 100])\n            .range([\"PeachPuff\", \"FireBrick\"]);\n\n        return colors(priorityData[obj.properties.Id - 1])\n    }\n\n    drawCityMap = () => {\n        const geojsonLink = \"https://raw.githubusercontent.com/huantingwei/comp4462/main/StHimark.geojson\";\n        d3.json(geojsonLink).then((geoData) => {\n            console.log(\"geoData\", geoData)\n\n            const priorityPerArea = [10, 20, 50, 100, 20, 15, 25, 35, 50, 70, 85, 25, 50, 70, 85, 25, 50, 70, 10]\n\n            let margin = { left: 10, right: 10, top: 5, bottom: 10 },\n                width = 700 - margin.left - margin.right,\n                height = 370 - margin.top - margin.bottom;\n\n            d3.select(\"#citymap\").selectAll(\"svg\").remove();\n            let svg = d3\n                .select(\"#citymap\").append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n            const projection = d3.geoIdentity().fitSize([width, height], geoData)\n            const path = d3.geoPath(projection);\n\n            svg.selectAll(\"path\")\n                .data(geoData.features)\n                .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .style(\"stroke\", \"#fff\")\n                .style(\"fill\", (d) => this.priorityColor(d, priorityPerArea))\n                .attr(\"class\", \"areas\")\n                .on(\"mouseover\", function (event, d) {\n                    d3.select(this)\n                        .attr(\"opacity\", 0.5)\n                })\n                .on(\"mouseout\", function (event, d) {\n                    d3.select(this)\n                        .attr(\"opacity\", 1)\n                })\n                .on(\"click\", (event, d) => {\n                    let selectedRegion = [d.properties.Id, d.properties.Nbrhood]\n                    this.props.onSelectRegion(selectedRegion)\n                    // console.log(\"selected region: \", d)\n                })\n\n            svg.selectAll(\".labels\")\n                .data(geoData.features)\n                .enter().append(\"text\")\n                .attr(\"class\", \"labels\")\n                .attr(\"x\", function (d) {\n                    return path.centroid(d)[0];\n                })\n                .attr(\"y\", function (d) {\n                    return path.centroid(d)[1];\n                })\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"font-size\", \"10px\")\n                .text((d) => d.properties.Nbrhood.toString())\n\n        }).catch(function (error) {\n            // handle error   \n            console.log('error in loading geojson!')\n        })\n    }\n    render() {\n        return <div id=\"citymap\"></div>;\n    }\n}\n\nexport default CityMap;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as d3 from 'd3';\nimport * as vsup from 'vsup';\n\nclass HeatMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // initialize color scale\n        var red = \"#b2182b\", yellow = \"#fee090\", blue = \"#abd9e9\";\n        var interpolateIsoRdBu = d3.scaleLinear()\n            .domain([0, 0.5, 1])\n            .range([blue, yellow, red])\n            .interpolate(d3.interpolateLab);\n        var vDom = [1, 10], uDom = [0, 1];\n        var quantization = vsup.quantization().branching(2).layers(4).valueDomain(vDom).uncertaintyDomain(uDom);\n        var vsupScale = vsup.scale().quantize(quantization).range(interpolateIsoRdBu);\n\n        var colorScale = d3\n            .scaleSequential()\n            .interpolator(d3.interpolateRdYlBu)\n            .domain([10, -5]);\n\n        this.state = {\n            start_time: 0,\n            end_time: 1,\n            descend: true,\n            attribute: {\n                medical: true,\n                power: false,\n                roads_and_bridges: false,\n                sewer_and_water: false,\n                buildings: false\n            },\n            uncertainty: true,\n            vsupScale,\n            colorScale\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"HeatMap did mount...\")\n        this.drawHeatmap(this.state.vsupScale, this.state.colorScale);\n        this.drawLegend(this.state.vsupScale, this.state.colorScale);\n    }\n\n    componentDidUpdate() {\n        console.log(\"HeatMap did update...\")\n        this.drawHeatmap(this.state.vsupScale, this.state.colorScale);\n    }\n\n    drawLegend = (vsupScale, colorScale) => {\n        // vsup legend\n        var vsupLegend = vsup.legend.arcmapLegend();\n        vsupLegend\n            .scale(vsupScale)\n            .size(160)\n            .x(0)\n            .y(0)\n            .vtitle(\"Intensity Reported\")\n            .utitle(\"Uncertainty\");\n\n        d3.select(\"#vsupLegend\").selectAll(\"svg\").remove();\n        let vsupLegendSvg = d3\n            .select(\"#vsupLegend\").append(\"svg\")\n            .attr(\"width\", 300)\n            .attr(\"height\", 300)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(15,40)\");\n        vsupLegendSvg.append(\"g\").call(vsupLegend)\n\n        // color legend\n        d3.select(\"#colorLegend\").selectAll(\"svg\").remove();\n        let colorLegendSvg = d3\n            .select(\"#colorLegend\").append(\"svg\")\n            .attr(\"width\", 180)\n            .attr(\"height\", 60)\n            .append(\"g\")\n\n        var linearGradient = colorLegendSvg.append(\"defs\").append(\"linearGradient\")\n            .attr(\"id\", `linear-gradient`);\n\n        linearGradient\n            .attr(\"x1\", \"0%\")\n            .attr(\"y1\", \"0%\")\n            .attr(\"x2\", \"100%\")\n            .attr(\"y2\", \"0%\");\n\n        //Set the color for the start (0%)\n        linearGradient.append(\"stop\")\n            .attr(\"offset\", \"0%\")\n            .attr(\"stop-color\", colorScale(1));\n\n        linearGradient.append(\"stop\")\n            .attr(\"offset\", \"50%\")\n            .attr(\"stop-color\", colorScale(5));\n\n        //Set the color for the end (100%)\n        linearGradient.append(\"stop\")\n            .attr(\"offset\", \"100%\")\n            .attr(\"stop-color\", colorScale(10));\n\n        colorLegendSvg.append(\"rect\")\n            .attr(\"width\", 160)\n            .attr(\"height\", 20)\n            .style(\"fill\", `url(#linear-gradient)`)\n            .attr(\"x\", 10)\n            .attr(\"y\", 10)\n\n        colorLegendSvg.append(\"text\").text(\"1\").attr(\"x\", 10).attr(\"y\", 45);\n        colorLegendSvg.append(\"text\").text(\"10\").attr(\"x\", 160).attr(\"y\", 45)\n    }\n\n    drawHeatmap = (vsupScale, colorScale) => {\n\n        d3.csv(\"./merge_ui.csv\").then((data) => {\n            console.log(\"rawdata\", data)\n\n            // preprocess data\n            let start_time = Date.parse(\"2020-04-08 6:00:00\")\n            let interval = 30 * 60 * 1000; // 30 min * 60 s * 1000 ms\n            let heatdata = [], time_range = [];\n            for (let i = 0; i < 20; i++) {\n                // fix 20 time intervals\n                let curtime = start_time + i * interval;\n                let date = new Date(curtime);\n                let datestring = date.getFullYear() + \"-\" + (date.getMonth() + 1).toString().padStart(2, '0') + \"-\" + date.getDate().toString().padStart(2, '0') + \" \" + date.getHours().toString().padStart(2, '0') + \":\" + date.getMinutes().toString().padStart(2, '0') + \":\" + date.getSeconds().toString().padStart(2, '0');\n                let dateDisplay = (date.getMonth() + 1).toString() + \".\" + date.getDate() + \" \" + date.getHours() + \":\" + date.getMinutes().toString().padStart(2, '0');\n                // console.log(datestring)\n                // console.log(data.filter(d => d.index == datestring))\n                data.filter(d => d.index == datestring).forEach(d => {\n                    let intensity = 0, uncertainty = 0, count = 0;\n                    if (parseFloat(d.medical_i) != -1 && this.state.attribute.medical) {\n                        intensity += parseFloat(d.medical_i);\n                        uncertainty += parseFloat(d.medical_u);\n                        count += 1;\n                    }\n                    if (parseFloat(d.power_i) != -1 && this.state.attribute.power) {\n                        intensity += parseFloat(d.power_i);\n                        uncertainty += parseFloat(d.power_u);\n                        count += 1;\n                    }\n                    if (parseFloat(d.sewer_and_water_i) != -1 && this.state.attribute.sewer_and_water) {\n                        intensity += parseFloat(d.sewer_and_water_i);\n                        uncertainty += parseFloat(d.sewer_and_water_u);\n                        count += 1;\n                    }\n                    if (parseFloat(d.roads_and_bridges_i) != -1 && this.state.attribute.roads_and_bridges) {\n                        intensity += parseFloat(d.roads_and_bridges_i);\n                        uncertainty += parseFloat(d.roads_and_bridges_u);\n                        count += 1;\n                    }\n                    if (parseFloat(d.buildings_i) != -1 && this.state.attribute.buildings) {\n                        intensity += parseFloat(d.buildings_i);\n                        uncertainty += parseFloat(d.buildings_u);\n                        count += 1;\n                    }\n\n                    heatdata.push({\n                        time: curtime,\n                        time_string: dateDisplay,\n                        location: parseInt(d.location),\n                        intensity_total: intensity / count,\n                        uncertainty_total: uncertainty / count,\n                        // medical: { intensity: parseFloat(d.medical_i), uncertainty: parseFloat(d.medical_u) },\n                        // power: { intensity: parseFloat(d.power_i), uncertainty: parseFloat(d.power_u) },\n                        // roads_and_bridges: { intensity: parseFloat(d.roads_and_bridges_i), uncertainty: parseFloat(d.roads_and_bridges_u) },\n                        // sewer_and_water: { intensity: parseFloat(d.sewer_and_water_i), uncertainty: parseFloat(d.sewer_and_water_u) },\n                        // buildings: { intensity: parseFloat(d.buildings_i), uncertainty: parseFloat(d.buildings_u) },\n                    })\n                })\n                time_range.push(dateDisplay);\n            }\n            console.log(\"heatdata\", heatdata);\n\n            let margin = { left: 30, right: 10, top: 30, bottom: 10 },\n                width = 1200 - margin.left - margin.right,\n                height = 1000 - margin.top - margin.bottom;\n\n            d3.select(\"#heatmap\").selectAll(\"svg\").remove();\n            let svg = d3\n                .select(\"#heatmap\").append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n            // x scale\n            let xScale = d3.scaleBand().range([0, width]).padding(0.1).domain(time_range);\n            svg.append(\"g\").style(\"font-size\", \"12px\").call(d3.axisTop(xScale)).call(g => {\n                g.select(\".domain\").remove();\n                g.selectAll(\"line\").remove();\n            });\n            // y scale\n            // sort \n            let loc_intensity = Array.from({ length: 19 }, (_, i) => i + 1).map(i => {\n                return {\n                    location: i,\n                    intensity_total: heatdata.filter(d => d.location == i).reduce((sum, cur) => {\n                        if (cur.intensity_total > 0) return sum + cur.intensity_total\n                        else return sum\n                    }, 0)\n                }\n            })\n            console.log(\"location intensity\", loc_intensity)\n            let yDomain;\n            if (this.state.descend) {\n                yDomain = loc_intensity.sort((a, b) => b.intensity_total - a.intensity_total).map(d => d.location)\n            } else {\n                yDomain = loc_intensity.sort((a, b) => a.intensity_total - b.intensity_total).map(d => d.location)\n            }\n            console.log(\"yDomain\", yDomain)\n            let yScale = d3.scaleBand().range([0, height]).domain(yDomain).padding(0.1);\n            svg.append(\"g\").style(\"font-size\", \"14px\").call(d3.axisLeft(yScale)).call(g => {\n                g.select(\".domain\").remove();\n                g.selectAll(\"line\").remove();\n            });\n\n            // color scales\n            // let colorScale = d3.scaleSequential().interpolator(d3.interpolateRdBu).domain([1, 10]);\n\n            svg.selectAll()\n                .data(heatdata)\n                .enter()\n                .append(\"rect\")\n                .attr(\"x\", (d) => xScale(d.time_string))\n                .attr(\"y\", (d) => yScale(d.location))\n                .attr(\"width\", xScale.bandwidth())\n                .attr(\"height\", yScale.bandwidth())\n                .style(\"fill\", (d) => {\n                    if (this.state.uncertainty) return (d.intensity_total > 0) ? vsupScale(d.intensity_total, d.uncertainty_total) : \"white\";\n                    else return (d.intensity_total > 0) ? colorScale(d.intensity_total) : \"white\";\n                })\n\n        }).catch(function (error) {\n            // handle error   \n            console.log('error in loading heatmap csv!')\n        })\n\n\n    }\n\n    handleOrder = () => {\n        console.log(\"handle order\")\n        let descend = document.getElementById(\"descendingRadio\").checked;\n        this.setState({ descend });\n    }\n\n    handleAttribute = () => {\n        console.log(\"handle attribute\")\n        let medical = document.getElementById(\"medicalCheck\").checked;\n        let power = document.getElementById(\"powerCheck\").checked;\n        let roads_and_bridges = document.getElementById(\"roads_and_bridgesCheck\").checked;\n        let sewer_and_water = document.getElementById(\"sewer_and_waterCheck\").checked;\n        let buildings = document.getElementById(\"buildingsCheck\").checked;\n        this.setState({\n            attribute: {\n                medical,\n                power,\n                roads_and_bridges,\n                sewer_and_water,\n                buildings\n            }\n        });\n    }\n\n    handleUncertainty = () => {\n        console.log(\"handle uncertainty\")\n        let uncertainty = document.getElementById(\"uncertaintyRadio\").checked;\n        this.setState({ uncertainty });\n    }\n\n    render() {\n        return <div class=\"row\">\n            <div class=\"col-10\">\n                <p>start time: {this.state.start_time}</p>\n                <div id=\"heatmap\" />\n            </div>\n            <div class=\"col-2\">\n                <span>Sort by:</span><br />\n                <input type=\"radio\" name=\"orderRadio\" id=\"ascendingRadio\" value=\"ascending\" onChange={this.handleOrder} /> Ascending <br />\n                <input type=\"radio\" name=\"orderRadio\" id=\"descendingRadio\" value=\"descending\" onChange={this.handleOrder} /> Descending\n                <br />\n                <br />\n                <span>Selected attribute:</span><br />\n                <input type=\"checkbox\" id=\"medicalCheck\" value=\"medical\" onChange={this.handleAttribute} /> Medical <br />\n                <input type=\"checkbox\" id=\"powerCheck\" value=\"power\" onChange={this.handleAttribute} /> Power<br />\n                <input type=\"checkbox\" id=\"roads_and_bridgesCheck\" value=\"roads_and_bridges\" onChange={this.handleAttribute} /> Roads and Bridges<br />\n                <input type=\"checkbox\" id=\"sewer_and_waterCheck\" value=\"sewer_and_water\" onChange={this.handleAttribute} /> Sewer and Water<br />\n                <input type=\"checkbox\" id=\"buildingsCheck\" value=\"buildings\" onChange={this.handleAttribute} /> Buildings\n                <br />\n                <br />\n                <span>w/o uncertainty:</span><br />\n                <input type=\"radio\" name=\"uncertaintyRadio\" id=\"noUncertaintyRadio\" value=\"noUncertainty\" onChange={this.handleUncertainty} /> Damage reported <br />\n                <div id=\"colorLegend\"></div>\n                <input type=\"radio\" name=\"uncertaintyRadio\" id=\"uncertaintyRadio\" value=\"uncertainty\" onChange={this.handleUncertainty} /> Damage reported + Uncertainty\n                <br />\n                <br />\n                <div id=\"vsupLegend\"></div>\n            </div>\n        </div>;\n    }\n}\n\nexport default HeatMap;","import React, { Component } from 'react';\nimport GridLayout from 'react-grid-layout';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CityMap from './CityMap';\n// import RadarChart from './RadarChart';\nimport HeatMap from './HeatMap';\nimport RadarChart from 'react-svg-radar-chart';\nimport 'react-svg-radar-chart/build/css/index.css';\n\nclass DashBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedRegion: [0, \"\"]\n        }\n    }\n\n    handleSelectRegion = (selectedRegion) => {\n        console.log(\"select region \", selectedRegion)\n        this.setState({ selectedRegion })\n    }\n\n\n    render() {\n        const layout = [\n            { i: 'a', x: 0, y: 0, w: 6, h: 9 },\n            { i: 'b', x: 6, y: 0, w: 6, h: 9 },\n            { i: 'c', x: 0, y: 9, w: 12, h: 4 },\n            { i: 'd', x: 0, y: 13, w: 12, h: 4 },\n            { i: 'e', x: 0, y: 17, w: 12, h: 27 },\n        ];\n        const rowHeight = 45;\n        const { innerWidth: width, innerHeight: height } = window;\n\n        return (<div>\n            <GridLayout className=\"layout\" layout={layout} cols={12} rowHeight={rowHeight} margin={[5, 1]} width={width}>\n                <div key=\"a\">\n                    <div class=\"card\" style={{ height: 9 * rowHeight }}>\n                        <p style={{ backgroundColor: \"#e9ecef\", margin: \"5px\", paddingLeft: \"5px\" }}>City Map</p>\n                        <CityMap onSelectRegion={(selectedRegion) => this.handleSelectRegion(selectedRegion)}></CityMap>\n                    </div>\n                </div>\n                <div key=\"b\">\n                    <div class=\"card\" style={{ height: 9 * rowHeight }}>\n                        <p style={{ backgroundColor: \"#e9ecef\", margin: \"5px\", paddingLeft: \"5px\" }}>Radar Chart</p>\n                        {/* <RadarChart></RadarChart> */}\n                        <div class=\"row\" style={{ marginLeft: 30, marginTop: 10 }}>\n                            <div class=\"col-8\">\n                                <RadarChart\n                                    captions={{\n                                        // columns\n                                        buildings: 'buildings',\n                                        medical: 'medical',\n                                        sewer_and_water: 'sewer and water',\n                                        roads_and_bridges: 'roads and bridges',\n                                        power: 'power'\n                                    }}\n                                    data={[\n                                        {\n                                            data: {\n                                                buildings: 0.4,\n                                                medical: 0.7,\n                                                sewer_and_water: 0.4,\n                                                roads_and_bridges: 0.8,\n                                                power: 0.5\n                                            },\n                                            meta: { color: '#fc9272' }\n                                        },\n                                    ]}\n                                    size={360}\n                                    options={{\n                                        captionProps: () => ({\n                                            className: 'caption',\n                                            textAnchor: 'middle',\n                                            fontSize: 15,\n                                            fontFamily: 'sans-serif'\n                                        }),\n                                    }}\n                                />\n                            </div>\n                            <div class=\"col-4\">\n                                <h3>{this.state.selectedRegion[1]}</h3>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div key=\"c\">\n                    <div class=\"card\" style={{ height: 4 * rowHeight }}>\n                        <p style={{ backgroundColor: \"#e9ecef\", margin: \"5px\", paddingLeft: \"5px\" }}># of Reports</p>\n                    </div>\n                </div>\n                <div key=\"d\">\n                    <div class=\"card\" style={{ height: 4 * rowHeight }}>\n                        <p style={{ backgroundColor: \"#e9ecef\", margin: \"5px\", paddingLeft: \"5px\" }}>Shaking Intensity</p>\n                    </div>\n                </div>\n                <div key=\"e\">\n                    <div class=\"card\" style={{ height: 27 * rowHeight }}>\n                        <p style={{ backgroundColor: \"#e9ecef\", margin: \"5px\", paddingLeft: \"5px\" }}>Heatmap</p>\n                        <HeatMap></HeatMap>\n                    </div>\n                </div>\n            </GridLayout>\n        </div>);\n    }\n}\n\nexport default DashBoard;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport DashBoard from \"./components/DashBoard\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DashBoard />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}